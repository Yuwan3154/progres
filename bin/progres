#!/usr/bin/env python

# Argument handling

import argparse
import importlib.metadata
import sys

parser = argparse.ArgumentParser(description=(
    "Fast protein structure searching using structure graph embeddings. "
    "See https://github.com/greener-group/progres for documentation and citation information. "
    f"This is version {importlib.metadata.version('progres')} of the software."
))
subparsers = parser.add_subparsers(dest="mode",
    help="the mode to run progres in, run \"progres {mode} -h\" to see help for each")

parser_search = subparsers.add_parser("search",
    description=(
        "Search one or more protein structures against a pre-embedded database. "
        "See https://github.com/greener-group/progres for documentation and citation information. "
        f"This is version {importlib.metadata.version('progres')} of the software."
    ),
    help="search one or more protein structures against a pre-embedded database")
parser_search.add_argument("-q", "--querystructure",
    help="query structure file in PDB/mmCIF/MMTF/coordinate format")
parser_search.add_argument("-l", "--querylist",
    help="text file with one query file path per line")
parser_search.add_argument("-t", "--targetdb", required=True,
    help=("pre-embedded database to search against, either \"scope95\", \"scope40\", "
          "\"cath40\", \"ecod70\", \"pdb100\", \"af21org\", \"ark_scope40_CIRPIN_embed_1_7_25\", \"afted\" or a file path"))
parser_search.add_argument("-z", "--model", default="CIRPIN_model_5k_cp_epoch301",
    help="model to use for searching, default is \"CIRPIN_model_5k_cp_epoch301\"")
parser_search.add_argument("-f", "--fileformat",
    choices=["guess", "pdb", "mmcif", "mmtf", "coords"], default="guess",
    help="file format of the query structure(s), by default guessed from the file extension")
parser_search.add_argument("-s", "--minsimilarity", type=float, default=0.8,
    help="Progres score (0 -> 1) above which to return hits, default 0.8")
parser_search.add_argument("-m", "--maxhits", type=int, default=100,
    help="maximum number of hits per domain to return, default 100")
parser_search.add_argument("-c", "--chainsaw", default=False, action="store_true",
    help=("split the query structure(s) into domains with Chainsaw and search with "
          "each domain separately"))
parser_search.add_argument("-d", "--device", default="cpu",
    help="device to run on, default is \"cpu\"")

parser_score = subparsers.add_parser("score",
    description=(
        "Calculate the Progres score between two protein domains. "
        "The order of the domains does not affect the score. "
        "A score of 0.8 or higher indicates the same fold. "
        "See https://github.com/greener-group/progres for documentation and citation information. "
        f"This is version {importlib.metadata.version('progres')} of the software."
    ),
    help="calculate the Progres score between two protein domains")
parser_score.add_argument("structure1",
    help="first structure file in PDB/mmCIF/MMTF/coordinate format")
parser_score.add_argument("structure2",
    help="second structure file in PDB/mmCIF/MMTF/coordinate format")
parser_score.add_argument("-f", "--fileformat1",
    choices=["guess", "pdb", "mmcif", "mmtf", "coords"], default="guess",
    help="file format of the first structure, by default guessed from the file extension")
parser_score.add_argument("-g", "--fileformat2",
    choices=["guess", "pdb", "mmcif", "mmtf", "coords"], default="guess",
    help="file format of the second structure, by default guessed from the file extension")
parser_score.add_argument("-z", "--model", default="CIRPIN_model_5k_cp_epoch301",
    help="model to use for scoring, default is \"CIRPIN_model_5k_cp_epoch301\"")
parser_score.add_argument("-d", "--device", default="cpu",
    help="device to run on, default is \"cpu\"")

parser_embed = subparsers.add_parser("embed",
    description=(
        "Embed a dataset of structures to allow it to be searched against. "
        "See https://github.com/greener-group/progres for documentation and citation information. "
        f"This is version {importlib.metadata.version('progres')} of the software."
    ),
    help="embed a dataset of structures to allow it to be searched against")
parser_embed.add_argument("-l", "--structurelist", required=True,
    help="text file with file path, domain name and optional note per line")
parser_embed.add_argument("-o", "--outputfile", required=True,
    help="output file path for the PyTorch file containing the embeddings")
parser_embed.add_argument("-f", "--fileformat",
    choices=["guess", "pdb", "mmcif", "mmtf", "coords"], default="guess",
    help="file format of the structures, by default guessed from the file extension")
parser_embed.add_argument("-z", "--model", default="CIRPIN_model_5k_cp_epoch301",
    help="model to use for embedding, default is \"CIRPIN_model_5k_cp_epoch301\"")
parser_embed.add_argument("-b", "--batch_size", type=int, default=None,
    help="batch size to use for embedding, default is None")
parser_embed.add_argument("-d", "--device", default="cpu",
    help="device to run on, default is \"cpu\"")

parser_validate = subparsers.add_parser("validate",
    description=(
        "Validate structure files to check if they can be processed by progres. "
        "Useful for identifying problematic files before embedding. "
        "See https://github.com/greener-group/progres for documentation and citation information. "
        f"This is version {importlib.metadata.version('progres')} of the software."
    ),
    help="validate structure files to check if they can be processed")
parser_validate.add_argument("-f", "--file",
    help="single structure file to validate")
parser_validate.add_argument("-l", "--filelist",
    help="text file with one structure file path per line to validate")
parser_validate.add_argument("-t", "--fileformat",
    choices=["guess", "pdb", "mmcif", "mmtf", "coords"], default="guess",
    help="file format of the structures, by default guessed from the file extension")

args = parser.parse_args()

def main():
    if args.mode == "search":
        from progres import progres_search_print
        if args.minsimilarity < 0 or args.minsimilarity > 1:
            raise argparse.ArgumentTypeError("minsimilarity must be between 0 and 1")
        if args.maxhits < 1:
            raise argparse.ArgumentTypeError("maxhits must be a positive integer")
        if args.querystructure:
            progres_search_print(querystructure=args.querystructure, targetdb=args.targetdb, model_name=args.model,
                                 fileformat=args.fileformat, minsimilarity=args.minsimilarity,
                                 maxhits=args.maxhits, chainsaw=args.chainsaw, device=args.device)
        elif args.querylist:
            progres_search_print(querylist=args.querylist, targetdb=args.targetdb, model_name=args.model,
                                 fileformat=args.fileformat, minsimilarity=args.minsimilarity,
                                 maxhits=args.maxhits, chainsaw=args.chainsaw, device=args.device)
        else:
            print("One of -q and -l must be given for structure searching", file=sys.stderr)
    elif args.mode == "score":
        from progres import progres_score_print
        progres_score_print(structure1=args.structure1, structure2=args.structure2,
                            fileformat1=args.fileformat1, fileformat2=args.fileformat2,
                            model_name=args.model, device=args.device)
    elif args.mode == "embed":
        from progres import progres_embed
        progres_embed(structurelist=args.structurelist, outputfile=args.outputfile,
                      fileformat=args.fileformat, model_name=args.model, device=args.device,
                      batch_size=args.batch_size)
    elif args.mode == "validate":
        from progres import progres_validate
        progres_validate(file=args.file, filelist=args.filelist, fileformat=args.fileformat)
    else:
        print("No mode selected, run \"progres -h\" to see help", file=sys.stderr)

if __name__ == "__main__":
    main()
